import SwiftUIimport Combineextension Color {    init(hex: String, alpha: Double = 1.0) {        var hexSanitized = hex.trimmingCharacters(in: .whitespacesAndNewlines)        hexSanitized = hexSanitized.replacingOccurrences(of: "#", with: "")            var rgb: UInt64 = 0        Scanner(string: hexSanitized).scanHexInt64(&rgb)        let red = Double((rgb & 0xFF0000) >> 16) / 255.0        let green = Double((rgb & 0x00FF00) >> 8) / 255.0        let blue = Double(rgb & 0x0000FF) / 255.0        self.init(red: red, green: green, blue: blue, opacity: alpha)    }        }extension Image {    init(svg: String) {        if #available(iOS 14.0, *) {            self.init(svg)        } else {            self.init(svg)            self.renderingMode(.original)                    }    }}extension View {    /// A backwards compatible wrapper for iOS 14 `onChange`    @ViewBuilder func valueChanged<T: Equatable>(value: T, onChange: @escaping (T) -> Void) -> some View {        if #available(iOS 14.0, *) {            self.onChange(of: value, perform: onChange)        } else {            self.onReceive(Just(value)) { (value) in                onChange(value)            }        }    }                func cornerRadius(_ radius: CGFloat, corners: UIRectCorner) -> some View {            clipShape( RoundedCorner(radius: radius, corners: corners) )    }        func dismissKeyboard() {        UIApplication.shared.sendAction(#selector(UIResponder.resignFirstResponder), to: nil, from: nil, for: nil)    }    }struct RoundedCorner: Shape {    var radius: CGFloat = .infinity    var corners: UIRectCorner = .allCorners    func path(in rect: CGRect) -> Path {        let path = UIBezierPath(roundedRect: rect, byRoundingCorners: corners, cornerRadii: CGSize(width: radius, height: radius))        return Path(path.cgPath)    }}extension UINavigationController: UIGestureRecognizerDelegate {    override open func viewDidLoad() {        super.viewDidLoad()        interactivePopGestureRecognizer?.delegate = self    }    public func gestureRecognizerShouldBegin(_ gestureRecognizer: UIGestureRecognizer) -> Bool {        return viewControllers.count > 1    }}extension Date {    func getIntDay() -> Int {        let calendar = Calendar.current        return calendar.component(.day, from: self)    }        func getIntMonth() -> Int {        let calendar = Calendar.current        return calendar.component(.month, from: self)    }        func string() -> String {        let formatter = DateFormatter()        formatter.dateFormat = "dd/MM/yyyy"        return formatter.string(from: self)    }        func monthAndYearToString() -> String {        let calendar = Calendar.current        let currentMonth = calendar.component(.month, from: self)        let currentYear = calendar.component(.year, from: self)                return "THG \(currentMonth) / \(currentYear)"    }            func datesOfMonth() -> [Date] {        let calendar =  Calendar.current        let currentMonth = calendar.component(.month, from: self)        let currentYear = calendar.component(.year, from: self)                var startDateComponents = DateComponents()        startDateComponents.year = currentYear        startDateComponents.month = currentMonth        startDateComponents.day = 1                let startDate = calendar.date(from: startDateComponents)!                var endDateComponents = DateComponents()        endDateComponents.month = 1        endDateComponents.day = -1        let endDate = calendar.date(byAdding: endDateComponents, to: startDate)!                var dates: [Date] = []        var currentDate = startDate                while currentDate <= endDate {            dates.append(currentDate)            currentDate = calendar.date(byAdding: .day, value: 1, to: currentDate)!        }                return dates    }            func getWeekdayNumber() -> Int {        let calendar = Calendar.current        let components = calendar.dateComponents([.weekday], from: self)                // Adjust the weekday to start from 1 (Sunday)        var adjustedWeekday = components.weekday! - calendar.firstWeekday + 1                // Handle the case where adjustedWeekday is less than 1 (Sunday)        if adjustedWeekday < 1 {            adjustedWeekday += 7        }                return adjustedWeekday    }}