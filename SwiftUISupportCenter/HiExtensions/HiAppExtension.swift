import SwiftUIimport Combineextension Color {    init(hex: String, alpha: Double = 1.0) {        var hexSanitized = hex.trimmingCharacters(in: .whitespacesAndNewlines)        hexSanitized = hexSanitized.replacingOccurrences(of: "#", with: "")            var rgb: UInt64 = 0        Scanner(string: hexSanitized).scanHexInt64(&rgb)        let red = Double((rgb & 0xFF0000) >> 16) / 255.0        let green = Double((rgb & 0x00FF00) >> 8) / 255.0        let blue = Double(rgb & 0x0000FF) / 255.0        self.init(red: red, green: green, blue: blue, opacity: alpha)    }        }extension Image {    init(svg: String) {        if #available(iOS 14.0, *) {            self.init(svg)        } else {            self.init(svg)            self.renderingMode(.original)                    }    }}extension View {    /// A backwards compatible wrapper for iOS 14 `onChange`    @ViewBuilder func valueChanged<T: Equatable>(value: T, onChange: @escaping (T) -> Void) -> some View {        if #available(iOS 14.0, *) {            self.onChange(of: value, perform: onChange)        } else {            self.onReceive(Just(value)) { (value) in                onChange(value)            }        }    }                func cornerRadius(_ radius: CGFloat, corners: UIRectCorner) -> some View {            clipShape( RoundedCorner(radius: radius, corners: corners) )    }        func dismissKeyboard() {        UIApplication.shared.sendAction(#selector(UIResponder.resignFirstResponder), to: nil, from: nil, for: nil)    }    }struct RoundedCorner: Shape {    var radius: CGFloat = .infinity    var corners: UIRectCorner = .allCorners    func path(in rect: CGRect) -> Path {        let path = UIBezierPath(roundedRect: rect, byRoundingCorners: corners, cornerRadii: CGSize(width: radius, height: radius))        return Path(path.cgPath)    }}extension UINavigationController: UIGestureRecognizerDelegate {    override open func viewDidLoad() {        super.viewDidLoad()        interactivePopGestureRecognizer?.delegate = self    }    public func gestureRecognizerShouldBegin(_ gestureRecognizer: UIGestureRecognizer) -> Bool {        return viewControllers.count > 1    }}